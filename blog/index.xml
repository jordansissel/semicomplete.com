<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on semicomplete</title>
    <link>https://semicomplete.com/blog/</link>
    <description>Recent content in Blogs on semicomplete</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright 2006-2019 Jordan Sissel - Content licensed as &lt;a href=&#39;https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode&#39;&gt;CC BY-NC-SA&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 14 Apr 2018 08:58:56 -0700</lastBuildDate>
    
	<atom:link href="https://semicomplete.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Home Office Automation</title>
      <link>https://semicomplete.com/blog/home-office-automation/</link>
      <pubDate>Sat, 14 Apr 2018 08:58:56 -0700</pubDate>
      
      <guid>https://semicomplete.com/blog/home-office-automation/</guid>
      <description>I built a little digital Rube-Goldberg device for my office. When I turn my desk power switch on, a little microcontroller brings my workstation and stereo online.
My desk has a keyboard and monitor, but no computer. The computer lives in the closet a few feet away. Also in this closet is my stereo which drives audio to for the office. This makes my desk cleaner and quieter, but makes it hard to hit the power buttons.</description>
    </item>
    
    <item>
      <title>Puppet &#34;pure fact-driven&#34; nodeless configuration
</title>
      <link>https://semicomplete.com/blog/geekery/puppet-nodeless-configuration/</link>
      <pubDate>Sat, 27 Nov 2010 01:14:37 -0800</pubDate>
      
      <guid>https://semicomplete.com/blog/geekery/puppet-nodeless-configuration/</guid>
      <description>Truth should guide your configuration management tools.
Truth in this case is: what machines you have, properties of those machines, roles for those machines, etc. For example &amp;ldquo;foo-1.a.example.com is a webserver&amp;rdquo; is a piece of truth. Where and how you store truth is up to you and out of scope for this post.
My goal is to have truth steer everything about my infrastructure. Roles, jobs, and even long-term one-offs get put into the truth source (like a machine role, etc).</description>
    </item>
    
    <item>
      <title>Debugging java threads with top(1) and jstack.
</title>
      <link>https://semicomplete.com/blog/geekery/debugging-java-performance/</link>
      <pubDate>Mon, 21 Jun 2010 19:24:23 -0700</pubDate>
      
      <guid>https://semicomplete.com/blog/geekery/debugging-java-performance/</guid>
      <description>At work, we&amp;rsquo;re testing some new real-time bidding on ADX and are working through some performance issues.
Our server is jetty + our code, and we&amp;rsquo;re seeing performance problems at relatively low QPS.
The first profiling attempt used YJP, but when it was attached to our server, the system load went up quickly and looked like this:
load average: 2671.04, 1653.95, 771.93
Not good; the load average while running with the profiler attached jumps to a number roughly equal to the number of application threads (3000 jetty threads).</description>
    </item>
    
    <item>
      <title>SSL handshake latency and HTTPS optimizations.
</title>
      <link>https://semicomplete.com/blog/geekery/ssl-latency/</link>
      <pubDate>Fri, 04 Jun 2010 02:33:15 -0700</pubDate>
      
      <guid>https://semicomplete.com/blog/geekery/ssl-latency/</guid>
      <description>At work today, I started investigating the latency differences for similar requests between HTTP and HTTPS. Historically, I was running with the assumption that higher latency on HTTPS (SSL) traffic was to be expected since SSL handshakes are more CPU intensive. I didn&amp;rsquo;t really think about the network consequences of SSL until today.
It&amp;rsquo;s all in the handshake.
TCP handshake is a 3-packet event. The client sends 2 packets, the server sends 1.</description>
    </item>
    
    <item>
      <title>Headless wrapper for ephemeral X servers
</title>
      <link>https://semicomplete.com/blog/geekery/headless-wrapper-for-ephemeral-xservers/</link>
      <pubDate>Tue, 11 May 2010 01:59:47 -0700</pubDate>
      
      <guid>https://semicomplete.com/blog/geekery/headless-wrapper-for-ephemeral-xservers/</guid>
      <description>For various projects I&amp;rsquo;m doing right now, I need an easy way to automatically run code in an X server that may not necessarily be the active display. This code may even run on servers in production that don&amp;rsquo;t have video cards or monitors attached.
For some history on this, check out this post on xvfb and firefox. You can solve the problem in that post by simply launching firefox with the tool below, and your X server will exit when firefox exits.</description>
    </item>
    
    <item>
      <title>Xvfb &#43; Firefox
</title>
      <link>https://semicomplete.com/blog/geekery/xvfb-firefox/</link>
      <pubDate>Sat, 08 Apr 2006 03:53:00 -0700</pubDate>
      
      <guid>https://semicomplete.com/blog/geekery/xvfb-firefox/</guid>
      <description>Resig has a bunch of unit tests he does to make sure jQuery works properly on whatever browser. Manually running and checking unit test results is annoying and time consuming. Let&amp;rsquo;s automate this.
Update (May 2010): See this post for more details on automating xserver startup without having to worry about display numbers (:1, :2, etc).
Combine something simple like Firefox and Xvfb (X Virtual Frame Buffer), and you&amp;rsquo;ve got a simple way to run Firefox without a visible display.</description>
    </item>
    
  </channel>
</rss>